#cloud-config

write_files:
- path: /opt/bin/digital_ocean_floating_ip.sh
  permissions: 0755
  owner: root
  content: |
    #!/bin/sh
    IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/anchor_ipv4/address)
    /usr/bin/ip addr add $IP/16 dev eth0

coreos:
  units:
  - name: swap.service
    command: start
    content: |
      [Unit]
      Description=Turn on swap

      [Service]
      Type=oneshot
      Environment="SWAPFILE=/2GiB.swap"
      RemainAfterExit=true
      ExecStartPre=/bin/bash -c "\
        fallocate -l 2g $SWAPFILE && \
        chmod 600 $SWAPFILE && \
        chattr +C $SWAPFILE && \
        mkswap $SWAPFILE && \
        losetup -f $SWAPFILE"
      ExecStartPre=/usr/sbin/losetup -f $${SWAPFILE}
      ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j $${SWAPFILE} | /usr/bin/cut -d : -f 1)"
      ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j $${SWAPFILE} | /usr/bin/cut -d : -f 1)"
      ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j $${SWAPFILE} | /usr/bin/cut -d : -f 1)"

      [Install]
      WantedBy=local.target

  - name: digital-ocean-floating-ip.service
    command: start
    content: |
      [Unit]
      Description=digital-ocean-floating-ip
      After=network-online.target
      Description=DigitalOcean Floating IP
      Documentation=https://www.digitalocean.com/community/tutorials/how-to-enable-floating-ips-on-an-older-droplet#coreos
      Requires=network-online.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/opt/bin/digital_ocean_floating_ip.sh

  - name: nginx.service
    command: restart
    content: |
      [Unit]
      Description=nginx
      After=docker.service
      Requires=docker.service

      [Service]
      KillMode=none
      User=core
      Restart=always
      RestartSec=20s

      ExecStartPre=-/usr/bin/docker kill nginx
      ExecStartPre=-/usr/bin/docker rm nginx
      ExecStart=/usr/bin/docker run --name nginx -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
      ExecStop=/usr/bin/docker stop nginx

  - name: pressora.service
    command: restart
    content: |
      [Unit]
      Description=pressora
      After=docker.service
      Requires=docker.service

      [Service]
      KillMode=none
      User=core
      Restart=always
      RestartSec=20s
      Environment="VIRTUAL_HOST=pressora.macacomaluco.space"
      Environment="VIRTUAL_PORT=80"

      ExecStartPre=-/usr/bin/docker kill pressora
      ExecStartPre=-/usr/bin/docker rm pressora
      ExecStart=/usr/bin/docker run --name pressora -e VIRTUAL_HOST -e VIRTUAL_PORT macacomaluco/pressora
      ExecStop=/usr/bin/docker stop pressora

  - name: cinema-fu.service
    command: restart
    content: |
      [Unit]
      Description=cinema-fu
      After=mongo.service
      Requires=mongo.service

      [Service]
      KillMode=none
      User=core
      Restart=always
      RestartSec=20s
      Environment="MONGO_PORT=tcp://172.17.42.1:27017"
      Environment="MONGO_DATABASE=cinema-fu"
      Environment="TMDB_API_KEY=${tmdb_api_key}"
      Environment="VIRTUAL_HOST=cinema-fu.macacomaluco.space"
      Environment="VIRTUAL_PORT=80"

      ExecStartPre=-/usr/bin/docker kill cinema-fu
      ExecStartPre=-/usr/bin/docker rm cinema-fu
      ExecStart=/usr/bin/docker run --name cinema-fu -e MONGO_PORT -e MONGO_DATABASE -e TMDB_API_KEY -e VIRTUAL_HOST -e VIRTUAL_PORT macacomaluco/cinema-fu
      ExecStop=/usr/bin/docker stop cinema-fu

  - name: mongo.service
    command: restart
    content: |
      [Unit]
      Description=mongo
      After=docker.service
      Requires=docker.service

      [Service]
      KillMode=none
      User=core
      Restart=always
      RestartSec=20s

      ExecStartPre=-/usr/bin/docker kill mongo
      ExecStartPre=-/usr/bin/docker rm mongo
      ExecStart=/usr/bin/docker run --name mongo -p 172.17.42.1:27017:27017 mongo:2.4.14
      ExecStop=/usr/bin/docker stop mongo
